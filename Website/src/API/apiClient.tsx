/* eslint-disable */
/* tslint:disable */
/*
 * This file was automatically generated by generateApiClient.ts
 */

const baseUrl = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000'; // Adjust the base URL as necessary

// Helper function to safely handle JSON parsing
async function parseJSON(response: Response) {
  try {
    const contentLength = response.headers.get('content-length');
    const contentType = response.headers.get('content-type');

    if (contentLength === '0' || response.status === 204) {
      return null;
    }

    if (contentType && contentType.includes('application/json')) {
      const jsonData = await response.json();
      return jsonData;
    }

    // If content type is not JSON, return the text
    const textData = await response.text();
    console.error('Non-JSON response:', textData);
    return textData;
  } catch (error) {
    console.error('Failed to parse JSON response:', error);
    return null;
  }
}

// Function to get the auth token (if using token-based auth)
async function getAuthToken(): Promise<string | null> {
  return localStorage.getItem('authToken');
}

/**
 * admin_admin_endpoint
 */
async function admin_admin_endpoint(): Promise<
  import('C:/Pas_Emploi/Website/src/API/Api').HttpResponse<void, any> | null
> {
  try {
    const token = await getAuthToken();
    const headers: HeadersInit = { 'Content-Type': 'application/json' };
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    const response = await fetch(`${baseUrl}/api/Admin/admin-endpoint`, {
      method: 'GET',
      headers,
      credentials: 'include',
    });

    if (response.ok) {
      // Handle different return types based on your API's response
      if (response.status === 204) {
        // No Content
        return null; // Or any default value you prefer
      }
      const responseData = await parseJSON(response); // Expecting the direct response
      return responseData; // Return the response directly
    } else {
      const errorData = await parseJSON(response);
      console.error(
        `admin_admin_endpoint Error: ${response.status} ${response.statusText}`,
        errorData,
      );
      return null;
    }
  } catch (error) {
    console.error('admin_admin_endpoint Exception:', error);
    return null;
  }
}

/**
 * admin_user_endpoint
 */
async function admin_user_endpoint(): Promise<
  import('C:/Pas_Emploi/Website/src/API/Api').HttpResponse<void, any> | null
> {
  try {
    const token = await getAuthToken();
    const headers: HeadersInit = { 'Content-Type': 'application/json' };
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    const response = await fetch(`${baseUrl}/api/Admin/user-endpoint`, {
      method: 'GET',
      headers,
      credentials: 'include',
    });

    if (response.ok) {
      // Handle different return types based on your API's response
      if (response.status === 204) {
        // No Content
        return null; // Or any default value you prefer
      }
      const responseData = await parseJSON(response); // Expecting the direct response
      return responseData; // Return the response directly
    } else {
      const errorData = await parseJSON(response);
      console.error(
        `admin_user_endpoint Error: ${response.status} ${response.statusText}`,
        errorData,
      );
      return null;
    }
  } catch (error) {
    console.error('admin_user_endpoint Exception:', error);
    return null;
  }
}

/**
 * authentication_login
 */
async function authentication_login(
  email: string,
  password: string,
): Promise<
  | import('C:/Pas_Emploi/Website/src/API/Api').HttpResponse<
      import('C:/Pas_Emploi/Website/src/API/Api').LoginResponseDTO,
      void | import('C:/Pas_Emploi/Website/src/API/Api').ProblemDetails
    >
  | null
> {
  try {
    const token = await getAuthToken();
    const headers: HeadersInit = { 'Content-Type': 'application/json' };
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    const response = await fetch(`${baseUrl}/api/Authentication/login`, {
      method: 'POST',
      headers,
      credentials: 'include',

      body: JSON.stringify({ email, password }),
    });

    if (response.ok) {
      // Handle different return types based on your API's response
      if (response.status === 204) {
        // No Content
        return null; // Or any default value you prefer
      }
      const responseData = await parseJSON(response); // Expecting the direct response
      return responseData; // Return the response directly
    } else {
      const errorData = await parseJSON(response);
      console.error(
        `authentication_login Error: ${response.status} ${response.statusText}`,
        errorData,
      );
      return null;
    }
  } catch (error) {
    console.error('authentication_login Exception:', error);
    return null;
  }
}

/**
 * authentication_logout
 */
async function authentication_logout(): Promise<
  import('C:/Pas_Emploi/Website/src/API/Api').HttpResponse<void, any> | null
> {
  try {
    const token = await getAuthToken();
    const headers: HeadersInit = { 'Content-Type': 'application/json' };
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    const response = await fetch(`${baseUrl}/api/Authentication/logout`, {
      method: 'POST',
      headers,
      credentials: 'include',

      body: JSON.stringify({}),
    });

    if (response.ok) {
      // Handle different return types based on your API's response
      if (response.status === 204) {
        // No Content
        return null; // Or any default value you prefer
      }
      const responseData = await parseJSON(response); // Expecting the direct response
      return responseData; // Return the response directly
    } else {
      const errorData = await parseJSON(response);
      console.error(
        `authentication_logout Error: ${response.status} ${response.statusText}`,
        errorData,
      );
      return null;
    }
  } catch (error) {
    console.error('authentication_logout Exception:', error);
    return null;
  }
}

/**
 * authentication_status
 */
async function authentication_status(): Promise<
  | import('C:/Pas_Emploi/Website/src/API/Api').HttpResponse<
      import('C:/Pas_Emploi/Website/src/API/Api').AuthenticationResponseDTO,
      any
    >
  | null
> {
  try {
    const token = await getAuthToken();
    const headers: HeadersInit = { 'Content-Type': 'application/json' };
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    const response = await fetch(`${baseUrl}/api/Authentication/status`, {
      method: 'GET',
      headers,
      credentials: 'include',
    });

    if (response.ok) {
      // Handle different return types based on your API's response
      if (response.status === 204) {
        // No Content
        return null; // Or any default value you prefer
      }
      const responseData = await parseJSON(response); // Expecting the direct response
      return responseData; // Return the response directly
    } else {
      const errorData = await parseJSON(response);
      console.error(
        `authentication_status Error: ${response.status} ${response.statusText}`,
        errorData,
      );
      return null;
    }
  } catch (error) {
    console.error('authentication_status Exception:', error);
    return null;
  }
}

/**
 * company_get_company_by_id
 */
async function company_get_company_by_id(
  query: { companyId?: number | undefined } | undefined,
): Promise<
  | import('C:/Pas_Emploi/Website/src/API/Api').HttpResponse<
      import('C:/Pas_Emploi/Website/src/API/Api').CompanyDTO,
      any
    >
  | null
> {
  try {
    const token = await getAuthToken();
    const headers: HeadersInit = { 'Content-Type': 'application/json' };
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    const response = await fetch(`${baseUrl}/api/Company/GetCompanyById`, {
      method: 'GET',
      headers,
      credentials: 'include',
    });

    if (response.ok) {
      // Handle different return types based on your API's response
      if (response.status === 204) {
        // No Content
        return null; // Or any default value you prefer
      }
      const responseData = await parseJSON(response); // Expecting the direct response
      return responseData; // Return the response directly
    } else {
      const errorData = await parseJSON(response);
      console.error(
        `company_get_company_by_id Error: ${response.status} ${response.statusText}`,
        errorData,
      );
      return null;
    }
  } catch (error) {
    console.error('company_get_company_by_id Exception:', error);
    return null;
  }
}

/**
 * company_add_company
 */
async function company_add_company(
  query:
    | {
        CompanyName?: string | undefined;
        Location?: string | undefined;
        Domain?: string | undefined;
        EmployeesId?: number | undefined;
      }
    | undefined,
): Promise<
  | import('C:/Pas_Emploi/Website/src/API/Api').HttpResponse<
      void,
      import('C:/Pas_Emploi/Website/src/API/Api').ProblemDetails
    >
  | null
> {
  try {
    const token = await getAuthToken();
    const headers: HeadersInit = { 'Content-Type': 'application/json' };
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    const response = await fetch(`${baseUrl}/api/Company/AddCompany`, {
      method: 'POST',
      headers,
      credentials: 'include',

      body: JSON.stringify({ query }),
    });

    if (response.ok) {
      // Handle different return types based on your API's response
      if (response.status === 204) {
        // No Content
        return null; // Or any default value you prefer
      }
      const responseData = await parseJSON(response); // Expecting the direct response
      return responseData; // Return the response directly
    } else {
      const errorData = await parseJSON(response);
      console.error(
        `company_add_company Error: ${response.status} ${response.statusText}`,
        errorData,
      );
      return null;
    }
  } catch (error) {
    console.error('company_add_company Exception:', error);
    return null;
  }
}

/**
 * offer_get_offer_by_company_id
 */
async function offer_get_offer_by_company_id(
  query: { CompanyId?: number | undefined } | undefined,
): Promise<
  import('C:/Pas_Emploi/Website/src/API/Api').HttpResponse<void, any> | null
> {
  try {
    const token = await getAuthToken();
    const headers: HeadersInit = { 'Content-Type': 'application/json' };
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    const response = await fetch(`${baseUrl}/api/Offer/GetOfferByCompanyId`, {
      method: 'GET',
      headers,
      credentials: 'include',
    });

    if (response.ok) {
      // Handle different return types based on your API's response
      if (response.status === 204) {
        // No Content
        return null; // Or any default value you prefer
      }
      const responseData = await parseJSON(response); // Expecting the direct response
      return responseData; // Return the response directly
    } else {
      const errorData = await parseJSON(response);
      console.error(
        `offer_get_offer_by_company_id Error: ${response.status} ${response.statusText}`,
        errorData,
      );
      return null;
    }
  } catch (error) {
    console.error('offer_get_offer_by_company_id Exception:', error);
    return null;
  }
}

/**
 * offer_add_offer
 */
async function offer_add_offer(
  query:
    | {
        OfferAdvertisementId?: number | undefined;
        Description?: string | undefined;
        Title?: string | undefined;
        CreatedAt?: string | undefined;
        UpdatedAt?: string | undefined;
        CompanyId?: number | undefined;
        PostedByUserId?: number | undefined;
      }
    | undefined,
): Promise<
  import('C:/Pas_Emploi/Website/src/API/Api').HttpResponse<void, any> | null
> {
  try {
    const token = await getAuthToken();
    const headers: HeadersInit = { 'Content-Type': 'application/json' };
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    const response = await fetch(`${baseUrl}/api/Offer/AddOffer`, {
      method: 'POST',
      headers,
      credentials: 'include',

      body: JSON.stringify({ query }),
    });

    if (response.ok) {
      // Handle different return types based on your API's response
      if (response.status === 204) {
        // No Content
        return null; // Or any default value you prefer
      }
      const responseData = await parseJSON(response); // Expecting the direct response
      return responseData; // Return the response directly
    } else {
      const errorData = await parseJSON(response);
      console.error(
        `offer_add_offer Error: ${response.status} ${response.statusText}`,
        errorData,
      );
      return null;
    }
  } catch (error) {
    console.error('offer_add_offer Exception:', error);
    return null;
  }
}

/**
 * user_get_user_by_id
 */
async function user_get_user_by_id(
  query: { userId?: number | undefined } | undefined,
): Promise<
  | import('C:/Pas_Emploi/Website/src/API/Api').HttpResponse<
      import('C:/Pas_Emploi/Website/src/API/Api').UserDTO,
      any
    >
  | null
> {
  try {
    const token = await getAuthToken();
    const headers: HeadersInit = { 'Content-Type': 'application/json' };
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    const response = await fetch(`${baseUrl}/api/User/GetUserById`, {
      method: 'GET',
      headers,
      credentials: 'include',
    });

    if (response.ok) {
      // Handle different return types based on your API's response
      if (response.status === 204) {
        // No Content
        return null; // Or any default value you prefer
      }
      const responseData = await parseJSON(response); // Expecting the direct response
      return responseData; // Return the response directly
    } else {
      const errorData = await parseJSON(response);
      console.error(
        `user_get_user_by_id Error: ${response.status} ${response.statusText}`,
        errorData,
      );
      return null;
    }
  } catch (error) {
    console.error('user_get_user_by_id Exception:', error);
    return null;
  }
}

/**
 * user_add_user
 */
async function user_add_user(
  query:
    | {
        firstName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        password?: string | undefined;
        phoneNumber?: string | undefined;
        countryCode?: string | undefined;
        userTypeId?: number | undefined;
      }
    | undefined,
): Promise<
  import('C:/Pas_Emploi/Website/src/API/Api').HttpResponse<void, any> | null
> {
  try {
    const token = await getAuthToken();
    const headers: HeadersInit = { 'Content-Type': 'application/json' };
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    const response = await fetch(`${baseUrl}/api/User/AddUser`, {
      method: 'POST',
      headers,
      credentials: 'include',

      body: JSON.stringify({ query }),
    });

    if (response.ok) {
      // Handle different return types based on your API's response
      if (response.status === 204) {
        // No Content
        return null; // Or any default value you prefer
      }
      const responseData = await parseJSON(response); // Expecting the direct response
      return responseData; // Return the response directly
    } else {
      const errorData = await parseJSON(response);
      console.error(
        `user_add_user Error: ${response.status} ${response.statusText}`,
        errorData,
      );
      return null;
    }
  } catch (error) {
    console.error('user_add_user Exception:', error);
    return null;
  }
}

export default {
  admin_admin_endpoint,
  admin_user_endpoint,
  authentication_login,
  authentication_logout,
  authentication_status,
  company_get_company_by_id,
  company_add_company,
  offer_get_offer_by_company_id,
  offer_add_offer,
  user_get_user_by_id,
  user_add_user,
};
